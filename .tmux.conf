set -g default-terminal 'xterm-256color'
set -as terminal-overrides ",gnome*:RGB"
set -g set-clipboard off
set -g mouse on
set -g xterm-keys on
set -g mode-keys vi
set -g history-limit 999999
set -s escape-time 0
set -g set-titles on
set -g allow-rename on
set -g renumber-windows on
set -g display-panes-time 2000
set -g display-time 4000
set -g monitor-activity on
set -g visual-activity on
set -g base-index 1
set -g history-file ~/.tmux_history
set -g focus-events on
set -g aggressive-resize on
set -g automatic-rename off
set -g clock-mode-style 24
set -g pane-base-index 1
set -g word-separators ' ,:;"=()[]<>$'
set -ag word-separators "'"
set -g wrap-search off
# statusbar
set -g status-justify left
set -g status-interval 1
set -g status-left-length 20
set -g status-right-length 130
set -g status-keys vi
set -g status-position bottom
set -g status-left " #S |"
set -g status-right " $USER@#{host_short}:\"#{=-80:pane_current_path}\""
set -ag status-right " | #{online_status} | %a %h %d %H:%M:%S "
set -g window-status-separator ''
set -g window-status-format "#{?window_zoomed_flag,#[fg=colour174] #I:#W,#[fg=bright] #I:#W} "
set -g window-status-current-format "#{?window_zoomed_flag,#[bg=brightred],}"
set -ag window-status-current-format " #I:#W#{?window_zoomed_flag,,} "
set -g status-bg black #base02
set -g status-fg green
set -g status-attr default
# windows title colors and format
setw -g window-status-fg brightblue #base0
setw -g window-status-bg black
setw -g window-status-attr dim
# active window title colors
setw -g window-status-current-fg black
setw -g window-status-current-bg green
setw -g window-status-current-attr bright
# pane border
set -g pane-border-fg black #base02
set -g pane-active-border-fg brightblue #base01
set -g pane-active-border-bg default
# message text
set -g message-bg black #base02
set -g message-fg brightred #orange
# pane number display
set -g display-panes-active-colour blue #blue
set -g display-panes-colour brightred #orange
# clock
setw -g clock-mode-colour green #green
# windows
bind -n C-M-t new-window -c '~' \; \
	command-prompt -ip 'window name' "rename-window \"%%%\""
bind -n C-M-y command-prompt -ip 'window name' "rename-window \"%%%\""
bind -n C-M-w confirm-before -p "kill-pane #P? (y/n)" kill-pane
bind -n C-M-PageUp previous-window
bind -n C-M-PageDown next-window
bind -n C-M-S-PageUp swap-window -t -1
bind -n C-M-S-PageDown swap-window -t +1
bind -n C-M-p next-layout
bind -n C-M-o choose-tree
# panes
bind -n C-M-Left select-pane -L
bind -n C-M-Right select-pane -R
bind -n C-M-Up select-pane -U
bind -n C-M-Down select-pane -D
bind -n C-M-Space resize-pane -Z
bind -n C-M-End select-pane -t :.+ \; \
	resize-pane -Z
bind -n C-M-Home select-pane -t :.- \; \
	resize-pane -Z
bind -n C-M-j split-window -c "#{pane_current_path}" -h
bind -n C-M-k split-window -c "#{pane_current_path}" -v
bind / split-window -h "vi ~/dev/docs/notes.md"
bind ? split-window -v "vi ~/dev/docs/notes.md"
bind . split-window -h "vi ~/dev/docs/todo.md"
bind > split-window -v "vi ~/dev/docs/todo.md"
# keyboard copy and scrolling
bind -n C-M-v select-pane \; copy-mode
bind -n C-PageUp if -F '#{alternate_on}' '' \
	'copy-mode -e; \
	send -X halfpage-up'
bind -n C-PageDown if -F '#{alternate_on}' '' \
	'copy-mode -e; \
	send -X halfpage-down'
bind -n S-Up if -F '#{alternate_on}' '' \
	'select-pane; copy-mode -e; \
	send -X begin-selection; \
	send -X cursor-up'
bind -n S-Down if -F '#{alternate_on}' '' \
	'select-pane; copy-mode -e; \
	send -X begin-selection; \
	send -X cursor-down'
bind -n S-Left if -F '#{alternate_on}' '' \
	'select-pane; copy-mode -e; \
	send -X begin-selection; \
	send -X cursor-left'
bind -n S-Right if -F '#{alternate_on}' '' \
	'select-pane; copy-mode -e; \
	send -X begin-selection; \
	send -X cursor-right'
bind -n S-PageUp if -F '#{alternate_on}' '' \
	'select-pane; copy-mode -e; \
	send -X begin-selection; \
	send -X page-up'
bind -n S-PageDown if -F '#{alternate_on}' '' \
	'select-pane; copy-mode -e; \
	send -X begin-selection; \
	send -X page-down'
bind -n S-Home if -F '#{alternate_on}' '' \
	'select-pane; copy-mode -e; \
	send -X begin-selection; \
	send -X start-of-line'
bind -n S-End if -F '#{alternate_on}' '' \
	'select-pane; copy-mode -e; \
	send -X begin-selection; \
	send -X end-of-line'
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send -X copy-selection-and-cancel \; \
	run "tmux save-buffer - | xclip -i -selection primary >/dev/null"
bind -T copy-mode-vi r send -X rectangle-toggle
bind -T copy-mode-vi Home send -X start-of-line
bind -T copy-mode-vi End send -X end-of-line
bind -T copy-mode-vi C-Up send -X next-paragraph
bind -T copy-mode-vi C-Left send -X previous-paragraph
bind -T copy-mode-vi C-Right send -X next-space
bind -T copy-mode-vi C-Left send -X previous-word
bind -T copy-mode-vi C-PageUp send -X halfpage-up
bind -T copy-mode-vi C-PageDown send -X halfpage-down
bind -T copy-mode-vi C-Home send -X top-line\; \
	send -X start-of-line
bind -T copy-mode-vi C-End send -X bottom-line \; \
	send -X end-of-line
bind -T copy-mode-vi S-Up if -F '#{selection_present}' \
	'send -X cursor-up' \
	'send -X begin-selection; send -X cursor-up'
bind -T copy-mode-vi S-Down if -F '#{selection_present}' \
	'send -X cursor-down' \
	'send -X begin-selection; send -X cursor-down'
bind -T copy-mode-vi S-Right if -F '#{selection_present}' \
	'send -X next-space' \
	'send -X begin-selection; send -X next-space'
bind -T copy-mode-vi S-Left if -F '#{selection_present}' \
	'send -X previous-word' \
	'send -X begin-selection; send -X previous-word'
bind -T copy-mode-vi S-PageUp if -F '#{selection_present}' \
	'send -X page-up' \
	'send -X begin-selection; send -X page-up'
bind -T copy-mode-vi S-PageDown if -F '#{selection_present}' \
	'send -X page-down' \
	'send -X begin-selection; send -X page-down'
bind -T copy-mode-vi S-Home if -F '#{selection_present}' \
	'send -X start-of-line' \
	'send -X begin-selection; send -X start-of-line'
bind -T copy-mode-vi S-End if -F '#{selection_present}' \
	'send -X end-of-line' \
	'send -X begin-selection; send -X end-of-line'
# mouse drag
bind -n MouseDragEnd1Pane if -Ft{mouse_any_flag} '#{alternate_on}' \
	"send -M" "copy-mode -t{mouse}; \
	send -X copy-pipe \"xclip -i -selection primary\""
	run "tmux save-buffer - | xclip -i -selection primary >/dev/null"
bind -T copy-mode-vi MouseDragEnd1Pane select-pane \; \
	send -X copy-pipe "xclip -i -selection primary" \; \
	run "tmux save-buffer - | xclip -i -selection primary >/dev/null" \; \
# mouse left click
bind -T copy-mode-vi MouseUp1Pane select-pane \; \
	send -X stop-selection
bind -T copy-mode-vi MouseDown1Pane select-pane \; \
	send -X stop-selection
# mouse middle click
bind -n MouseDown2Pane select-pane \; \
	run "tmux set-buffer \"$(xclip -o -selection primary)\"; \
	tmux paste-buffer >/dev/null"
bind -T copy-mode-vi MouseDown2Pane select-pane \; \
	send -X copy-selection-and-cancel \; \
	run "tmux save-buffer - | xclip -i -selection primary >/dev/null" \; \
	run "tmux set-buffer \"$(xclip -o -selection primary)\"; \
	tmux paste-buffer >/dev/null"
# mouse double click
bind -n DoubleClick1Pane if -Ft{mouse_any_flag} '#{alternate_on}' \
	"send -M" "copy-mode -t{mouse}; \
	send -X select-word; \
	send -X stop-selection; \
	send -X copy-pipe \"xclip -i -selection primary\"; \
	run \"tmux save-buffer - | xclip -i -selection primary >/dev/null\""
bind -T copy-mode-vi DoubleClick1Pane select-pane \; \
	send -X select-word \; send -X stop-selection \; \
	send -X copy-pipe "xclip -i -selection primary" \; \
	run "tmux save-buffer - | xclip -i -selection primary >/dev/null"
# mouse triple click
bind -n TripleClick1Pane if -Ft{mouse_any_flag} '#{alternate_on}' \
	'send -M' "copy-mode -t{mouse}; \
	send -X select-line; \
        send -X stop-selection; \
	send -X copy-pipe \"xclip -i -selection primary\"; \
	run \"tmux save-buffer - | xclip -i -selection primary >/dev/null\""
bind -T copy-mode-vi TripleClick1Pane select-pane \; \
	send -X select-line \; send -X stop-selection \; \
	send -X copy-pipe "xclip -i -selection primary" \; \
	run "tmux save-buffer - | xclip -i -selection primary >/dev/null"
# mouse scrolling
bind -n WheelUpPane if -Ft{mouse_any_flag} '#{alternate_on}' \
	'select-pane; send -N 3 -t= Up' \
	"select-pane; copy-mode -t{mouse}; send -X -N 3 scroll-up"
bind -n C-WheelUpPane if -Ft{mouse_any_flag} '#{alternate_on}' \
	'select-pane; send -t= Up' \
	"select-pane; copy-mode -t{mouse}; send -X -N 1 scroll-up"
bind -n S-WheelUpPane if -Ft{mouse_any_flag} '#{alternate_on}' \
	'select-pane; send -t= PageUp' \
	"select-pane; copy-mode -t{mouse}; send -X halfpage-up"
bind -n WheelDownPane if -Ft{mouse_any_flag} '#{alternate_on}' \
	'select-pane; send -N 3 -t= Down' \
	"select-pane; copy-mode -t{mouse}; send -X -N 3 scroll-down"
bind -n C-WheelDownPane if -Ft{mouse_any_flag} '#{alternate_on}' \
	'select-pane; send -t= Down' \
	"select-pane; copy-mode -t{mouse}; send -X -N 1 scroll-down"
bind -n S-WheelDownPane if -Ft{mouse_any_flag} '#{alternate_on}' \
	'select-pane; send -t= PageDown' \
	"select-pane; copy-mode -t{mouse}; send -X halfpage-down"
bind -T copy-mode-vi WheelUpPane send -X clear-selection \; \
	send -X -N 3 scroll-up
bind -T copy-mode-vi WheelDownPane send -X clear-selection \; \
	send -X -N 3 scroll-down
bind -T copy-mode-vi C-WheelUpPane send -X clear-selection \; \
	send -X -N 1 scroll-up
bind -T copy-mode-vi C-WheelDownPane send -X clear-selection \; \
	send -X -N 1 scroll-down
bind -T copy-mode-vi S-WheelUpPane send -X clear-selection \; \
	send -X halfpage-up
bind -T copy-mode-vi S-WheelDownPane send -X clear-selection \; \
	send -X halfpage-down
# search
bind -n C-M-f select-pane \; copy-mode -e \; \
	command-prompt -ip "(search up)" "send -X search-backward-incremental \"%%%\""
bind -T copy-mode-vi C-M-f select-pane \; \
	command-prompt -ip "(search up)" "send -X search-backward-incremental \"%%%\""
bind -n C-M-g select-pane \; copy-mode -e \; \
	command-prompt -ip "(search down)" "send -X search-forward-incremental \"%%%\""
bind -T copy-mode-vi C-M-g select-pane \; \
	command-prompt -ip "(search down)" "send -X search-forward-incremental \"%%%\""
bind -n C-M-h select-pane\; choose-buffer
bind -T copy-mode-vi C-M-h select-pane \; \
	choose-buffer
# misc
bind -n C-M-l select-pane \; \
	confirm-before -p 'clear history (y/n)' "clear-history"
bind -n C-M-s command-prompt -p 'save history' -I "~/%Y.%m.%d-%H.%M.%S.history" \
	'capture-pane -S -; \
	save-buffer %1; \
	delete-buffer'
bind -n C-M-n run-shell "tmux split-window -c \"#{pane_current_path}\" -v -l 20 \
	\"~/.tmux/plugins/extrakto/scripts/tmux-extrakto.sh #{pane_id}\""
# plugins
set -g @shell_mode 'vi'
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-urlview'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-online-status'
set -g @plugin 'laktak/extrakto'
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-dir '~/.tmux-resurrect-data/'
set -g @resurrect-save-shell-history 'on'
set -g @continuum-save-interval '3600'
set -g @continuum-restore 'on'
set -g @continuum-boot 'on'
set -g @extrakto_key ''
set -g @@extrakto_default_opt 'word'
set -g @extrakto_clip_tool 'xclip -i -selection primary >/dev/null'
set -g @extrakto_open_tool 'vim'
set -g @online_icon 'on'
set -g @offline_icon 'off'
#keep this line at the very bottom of tmux.conf
run '~/.tmux/plugins/tpm/tpm'
